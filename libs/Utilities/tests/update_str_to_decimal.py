import unittest
import datetime
from Utilities.dict_management import update_the_value_for_the_key_list_to_decimal, update_the_value_for_selected_key_to_decimal
from decimal import Decimal

class Test(unittest.TestCase):
    def test1(self):
        expect = {'Detail': {'CC_STMT_HDR_LIST': {'CC_STMT_HDR': [{'BAL': Decimal('7620.85'), 'CARD_NO_ENCPT': 'BEaBPf1Hd22r9WhQTwk4VBE5RePRTA0IwuLT5zD2apU=', 'CARD_NO_MASK': '406230******3909', 'CARD_ORG_NO': '200', 'CARD_TP': '111', 'CR_LMT_AMT': Decimal('100000.00'), 'DUE_DT': datetime.date(2018, 10, 17), 'FNC_CHRG_AMT': Decimal('1360.42'), 'MN_PYMT_AMT': Decimal('7620.85'), 'PAID_AMT': Decimal('-90000.00'), 'PREV_BAL': Decimal('96260.43'), 'STMT_DT': datetime.date(2018, 10, 2)}, {'BAL': Decimal('96260.43'), 'CARD_NO_ENCPT': 'BEaBPf1Hd22r9WhQTwk4VBE5RePRTA0IwuLT5zD2apU=', 'CARD_NO_MASK': '406230******3909', 'CARD_ORG_NO': '200', 'CARD_TP': '111', 'CR_LMT_AMT': Decimal('100000.00'), 'DUE_DT': datetime.date(2018, 9, 17), 'FNC_CHRG_AMT': Decimal('1349.89'), 'MN_PYMT_AMT': Decimal('96260.43'), 'PAID_AMT': Decimal('-95000.00'), 'PREV_BAL': Decimal('94910.54'), 'STMT_DT': datetime.date(2018, 9, 2)}, {'BAL': Decimal('94910.54'), 'CARD_NO_ENCPT': 'BEaBPf1Hd22r9WhQTwk4VBE5RePRTA0IwuLT5zD2apU=', 'CARD_NO_MASK': '406230******3909', 'CARD_ORG_NO': '200', 'CARD_TP': '111', 'CR_LMT_AMT': Decimal('100000.00'), 'DUE_DT': datetime.date(2018, 8, 17), 'FNC_CHRG_AMT': Decimal('1429.80'), 'MN_PYMT_AMT': Decimal('94910.54'), 'PAID_AMT': Decimal('-77402.24'), 'PREV_BAL': Decimal('100882.98'), 'STMT_DT': datetime.date(2018, 8, 2)}]}}, 'Header': {'FCN_NM': 'RS_CC_STMT_HDR', 'RQS_UNQ_ID': 'None', 'RSP_APL_ID': '655', 'RSP_CD': '00000', 'RSP_ST': 'Success', 'RSP_TMS': datetime.datetime(2020, 1, 23, 4, 9, 37, 808000), 'RSP_UNQ_ID': '655_20200123_a2bd03f1043c4c949bf6342ca1050738'}}
        dict1 = {'Header': {'FCN_NM': 'RS_CC_STMT_HDR', 'RQS_UNQ_ID': 'None', 'RSP_APL_ID': '655', 'RSP_UNQ_ID': '655_20200123_a2bd03f1043c4c949bf6342ca1050738', 'RSP_TMS': datetime.datetime(2020, 1, 23, 4, 9, 37, 808000), 'RSP_CD': '00000', 'RSP_ST': 'Success'}, 'Detail': {'CC_STMT_HDR_LIST': {'CC_STMT_HDR': [{'CARD_NO_ENCPT': 'BEaBPf1Hd22r9WhQTwk4VBE5RePRTA0IwuLT5zD2apU=', 'CARD_NO_MASK': '406230******3909', 'CARD_ORG_NO': '200', 'CARD_TP': '111', 'BAL': '7620.85', 'MN_PYMT_AMT': '7620.85', 'CR_LMT_AMT': '100000.00', 'STMT_DT': datetime.date(2018, 10, 2), 'DUE_DT': datetime.date(2018, 10, 17), 'PREV_BAL': '96260.43', 'FNC_CHRG_AMT': '1360.42', 'PAID_AMT': '-90000.00'}, {'CARD_NO_ENCPT': 'BEaBPf1Hd22r9WhQTwk4VBE5RePRTA0IwuLT5zD2apU=', 'CARD_NO_MASK': '406230******3909', 'CARD_ORG_NO': '200', 'CARD_TP': '111', 'BAL': '96260.43', 'MN_PYMT_AMT': '96260.43', 'CR_LMT_AMT': '100000.00', 'STMT_DT': datetime.date(2018, 9, 2), 'DUE_DT': datetime.date(2018, 9, 17), 'PREV_BAL': '94910.54', 'FNC_CHRG_AMT': '1349.89', 'PAID_AMT': '-95000.00'}, {'CARD_NO_ENCPT': 'BEaBPf1Hd22r9WhQTwk4VBE5RePRTA0IwuLT5zD2apU=', 'CARD_NO_MASK': '406230******3909', 'CARD_ORG_NO': '200', 'CARD_TP': '111', 'BAL': '94910.54', 'MN_PYMT_AMT': '94910.54', 'CR_LMT_AMT': '100000.00', 'STMT_DT': datetime.date(2018, 8, 2), 'DUE_DT': datetime.date(2018, 8, 17), 'PREV_BAL': '100882.98', 'FNC_CHRG_AMT': '1429.80', 'PAID_AMT': '-77402.24'}]}}}
        keylist = ['BAL', 'MN_PYMT_AMT', 'CR_LMT_AMT', 'PREV_BAL', 'FNC_CHRG_AMT', 'PAID_AMT']
        result = update_the_value_for_the_key_list_to_decimal(dict1, keylist)
        assert result == expect

    def test2(self):
        expect = {'Detail': {'CR_SMY_LIST': {'CR_SMY_INF': [{'PD_GRP_ABR': 'LI', 'POS_DT': datetime.date(2020, 2, 5), 'TOT_LMT_AMT': Decimal('9260000.00'), 'TOT_OTSND_BAL': Decimal('2735424.00'), 'TOT_PNP_AMT': Decimal('2735424.00')}, {'PD_GRP_ABR': 'LN', 'POS_DT': datetime.date(2020, 1, 22), 'TOT_LMT_AMT': Decimal('64925570.00'), 'TOT_OTSND_BAL': Decimal('2486534.86'), 'TOT_PNP_AMT': Decimal('2265488.30')}, {'PD_GRP_ABR': 'PN', 'POS_DT': datetime.date(2020, 1, 22), 'TOT_LMT_AMT': Decimal('71157000.00'), 'TOT_OTSND_BAL': Decimal('17948.11'), 'TOT_PNP_AMT': Decimal('17000.00')}]}, 'IP_ID': 11}, 'Header': {'FCN_NM': 'RS_CR_SMY', 'RQS_UNQ_ID': '655_20200206_477688976806612', 'RSP_APL_ID': '655', 'RSP_CD': '00000', 'RSP_ST': 'Success', 'RSP_TMS': datetime.datetime(2020, 1, 23, 16, 21, 47, 439000), 'RSP_UNQ_ID': '655_20200123_58e7ad4831094b7fb56678815ca32403', 'TOT_RCRD': 3}}
        dict1 = {'Detail': {'CR_SMY_LIST': {'CR_SMY_INF': [{'PD_GRP_ABR': 'LI', 'POS_DT': datetime.date(2020, 2, 5), 'TOT_LMT_AMT': '9260000.00', 'TOT_OTSND_BAL': '2735424.00', 'TOT_PNP_AMT': '2735424.00'}, {'PD_GRP_ABR': 'LN', 'POS_DT': datetime.date(2020, 1, 22), 'TOT_LMT_AMT': '64925570.00', 'TOT_OTSND_BAL': '2486534.86', 'TOT_PNP_AMT': '2265488.30'}, {'PD_GRP_ABR': 'PN', 'POS_DT': datetime.date(2020, 1, 22), 'TOT_LMT_AMT': '71157000.00', 'TOT_OTSND_BAL': '17948.11', 'TOT_PNP_AMT': '17000.00'}]}, 'IP_ID': 11}, 'Header': {'FCN_NM': 'RS_CR_SMY', 'RQS_UNQ_ID': '655_20200206_477688976806612', 'RSP_APL_ID': '655', 'RSP_CD': '00000', 'RSP_ST': 'Success', 'RSP_TMS': datetime.datetime(2020, 1, 23, 16, 21, 47, 439000), 'RSP_UNQ_ID': '655_20200123_58e7ad4831094b7fb56678815ca32403', 'TOT_RCRD': 3}}
        keylist = ['TOT_LMT_AMT', 'TOT_OTSND_BAL', 'TOT_PNP_AMT']
        result = update_the_value_for_the_key_list_to_decimal(dict1, keylist)
        assert result == expect

    def test3(self):
        expect = {'Detail': {'AR_ID': 11, 'DRDWN_LIST': {'DRDWN_INF': [{'CCY_CD': 'USD', 'DRDWN_NO': 1, 'OTSND_BAL': Decimal('0.00')}, {'CCY_CD': 'USD', 'DRDWN_NO': 2, 'OTSND_BAL': Decimal('0.00')}, {'CCY_CD': 'USD', 'DRDWN_NO': 3, 'OTSND_BAL': Decimal('0.00')}, {'CCY_CD': 'USD', 'DRDWN_NO': 4, 'OTSND_BAL': Decimal('0.00')}]}, 'POS_DT': datetime.date(2020, 1, 21)}}
        dict1 = {'Detail': {'AR_ID': 11, 'DRDWN_LIST': {'DRDWN_INF': [{'CCY_CD': 'USD', 'DRDWN_NO': 1, 'OTSND_BAL': '0.00'}, {'CCY_CD': 'USD', 'DRDWN_NO': 2, 'OTSND_BAL': '0.00'}, {'CCY_CD': 'USD', 'DRDWN_NO': 3, 'OTSND_BAL': '0.00'}, {'CCY_CD': 'USD', 'DRDWN_NO': 4, 'OTSND_BAL': '0.00'}]}, 'POS_DT': datetime.date(2020, 1, 21)}}
        key = 'OTSND_BAL'
        result = update_the_value_for_selected_key_to_decimal(dict1, key)
        assert result == expect
